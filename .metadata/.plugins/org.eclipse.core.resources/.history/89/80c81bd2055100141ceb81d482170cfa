import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

class tInfo{
	float arrivalTime;
	int id;
	int timeRemaining;
	int priority;
}

public class Scheduler {
	private final BlockingQueue<Integer> queue;
	private static float globalTime;
	private Object mutex0 = new Object();
	private Object mutex1 = new Object();
	
	private final int schedType;
	
	public synchronized void setGlobalTime(float arrivalTime){
		globalTime = arrivalTime;
	}
	
	public synchronized float getGlobalTime(){
		return globalTime;
	}
	
	public Scheduler(int type){
		queue = new LinkedBlockingQueue<Integer>();
		
		schedType = type;
	}


	
	
	public float scheduleme(float arrivalTime, int id, int timeRemaining,
			int priority) {
		setGlobalTime((float) Math.ceil(arrivalTime));
		// lock the addition of a queue element
		switch (schedType){
		case 0:
			if (queue.contains(id)){
				if (queue.peek()==id){
					if (timeRemaining == 0){
						queue.remove();
					}
					return getGlobalTime();
				}
				else{
					while (queue.peek()!=id)
						;
					return getGlobalTime();
				}
			} 
			else{
				try {
					queue.put(id);
					while (queue.peek()!=id)
						;
					return getGlobalTime();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		default:
			break;
		}
		return priority;
	}

}

