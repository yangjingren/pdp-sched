import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class tInfo{
	float arrivalTime;
	int id;
	int timeRemaining;
	int priority;
}

public class Scheduler {
	private final int schedType;
	private static float globalTime;
	private LinkedList<tInfo> FCFS = new LinkedList<tInfo>();
	private Object mutex0 = new Object();
	private Object mutex1 = new Object();
	
	public synchronized void setGlobalTime(float arrivalTime){
		globalTime = arrivalTime;
		
	}
	
	public synchronized float getGlobalTime(){
		return globalTime;
	}
	
	public Scheduler(int type) {
		
		schedType = type;
	}

	public int findLocation(int id){
		int location = 0;
		tInfo temp;
		while (location < FCFS.size()){
			temp = (tInfo) FCFS.get(location);
			if (temp.id == id){
				break;
			}
			location++;
		}
		if (location > FCFS.size()||FCFS.size()==0){
			return -1;
		}
		return location;
	}
	
	
	
	public int FCFSS(float arrivalTime, int id, int timeRemaining){
		
			int location;
			tInfo info = new tInfo();
			info.arrivalTime = arrivalTime;
			info.id = id;
			info.timeRemaining = timeRemaining;
			location = findLocation(id);
			setGlobalTime(arrivalTime);
			synchronized(mutex0){
			if (location < 0){
				if (FCFS.size() == 0){
					FCFS.add(info);
					setGlobalTime((float) Math.ceil(arrivalTime));
				}
				else
					try {
						wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
			else if (location == 0){
				if (timeRemaining == 0){
					FCFS.remove();
					if (FCFS.size()!=0)
						notify();
				}
				else{
					FCFS.set(0, info);
				}
			}
			
		}
		return 0;
	}
	
	public float scheduleme(float arrivalTime, int id, int timeRemaining,
			int priority) {
		// lock the addition of a queue element
		switch (schedType){
		case 0:
			FCFSS(arrivalTime, id, timeRemaining);
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		default:
			break;
		}
		
		return getGlobalTime();
	}

}

