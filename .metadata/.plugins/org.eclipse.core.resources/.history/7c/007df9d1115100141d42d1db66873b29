import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

class tInfo{
	float arrivalTime;
	int id;
	int timeRemaining;
	int priority;
}

public class Scheduler {
	private static BlockingQueue<Integer> queue;
	private static List<int[]> myList;
	private static float globalTime;
	private Object mutex0 = new Object();
	private Object mutex1 = new Object();
	
	private final int schedType;
	
	public synchronized void setGlobalTime(float arrivalTime){
		globalTime = arrivalTime;
	}
	
	public synchronized float getGlobalTime(){
		return globalTime;
	}
	
	public Scheduler(int type){
		switch (type){
		case 0:
			queue = new LinkedBlockingQueue<Integer>();
			break;
		case 1:
			break;
		case 2:
			myList = new ArrayList<int[]>();
			break;
		}
		schedType = type;
	}

	public float FCFS(float arrivalTime, int id, int timeRemaining){
		if (queue.contains(id)){
			if (queue.peek()==id){
				if (timeRemaining == 0){
					queue.remove();
					if (queue.size()!=0)
						mutex0.notifyAll();
					else
						;
				}
				
				return getGlobalTime();
			}
			else{
				while (queue.peek()!=id){
					try {
						mutex0.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				return getGlobalTime();
			}
		} 
		else{
			try {
				queue.put(id);
				while (queue.peek()!=id){
					try {
						mutex0.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}	
				return getGlobalTime();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return getGlobalTime();
	}
	
	public float PBS(float arrivalTime, int id, int timeRemaining,
			int priority) {
		
		
		
		
		return getGlobalTime();
	}
	
	
	
	public float scheduleme(float arrivalTime, int id, int timeRemaining,
			int priority) {
		synchronized(mutex0){
		setGlobalTime((float) Math.ceil(arrivalTime));
		// lock the addition of a queue element
		switch (schedType){
		case 0:
			//FCFS
			return FCFS(arrivalTime, id, timeRemaining);
		case 1:
			break;
		case 2:
			return PBS(arrivalTime, id, timeRemaining, priority);
		case 3:
			break;
		default:
			return (float) 0.00;
		}
		return 0;
	}
	}

}

